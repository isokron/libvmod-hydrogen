#
# Copyright isokron AS (c) 2019-2021.
#
# Author: Lasse Karstensen <lasse@isokron.no>
#

$Module hydrogen 3 "Hydrogen VMOD"

DESCRIPTION
===========

This is vmod-hydrogen implementing data encryption in Varnish VCL.

From https://github.com/jedisct1/libhydrogen :

> The Hydrogen library is a small, easy-to-use, hard-to-misuse cryptographic library.

Main purpose of this module is to easily encrypt and decrypt cookies made inside
Varnish and kept on the client side. Bonus points for getting integrity protection
"for free".


USAGE
=====


::
    import hydrogen;
    import std;

    sub vcl_recv {
        set req.http.x-session-id = hydrogen.decrypt(req.http.Session, "very_secret_key", "fallback");

        if (req.http.x-session-id == "fallback") {
            return(synth(401, "Bad Request"));
        }
    }

    sub vcl_deliver {
        set resp.http.Set-Cookie = "session-id=" + hydrogen.encrypt("" + std.random(1000, 9999), "very_secret_key") + ";";
    }


FUNCTIONS
=========

$Prefix vmod
$Event vmod_event

$Function STRING encrypt(STRING str, STRING key)

Encrypt the string in `str` using key `key` and return a HEX encoded value of it.

$Function STRING decrypt(STRING str, STRING key, STRING fallback)

Decrypt a HEX encoded encrypted string `str` using `key` and return the plaintext
version of it. If decoding or decryption fails, return `fallback`.

$Function STRING random_string(INT length)

Return a cryptographically safe string of a given length.

Use is for session keys, nonces, and similar where std.random() is unsafe.
